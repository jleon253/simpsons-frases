{"version":3,"sources":["logo.svg","components/Frase.jsx","components/Spinner.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Frase","frase","className","src","alt","width","height","Spinner","App","useState","setFrase","cargando","setCargando","msgError","setMsgError","obtenerFrase","a","fetch","credentials","then","res","json","catch","err","data","setTimeout","useEffect","logo","role","type","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,4OCuB5BC,G,YApBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACC,kBAAC,WAAD,KACC,yBAAKC,UAAU,UACd,wBAAIA,UAAU,SAASD,EAAK,QAE7B,yBAAKC,UAAU,uDACd,yBACCC,IAAKF,EAAK,MACVC,UAAU,+BACVE,IAAI,mBACJC,MAAM,OACNC,OAAO,SAER,gCAAYJ,UAAU,aAAaD,EAAK,eCJ7BM,G,MAVC,WACd,OACE,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,eC0ENM,MA5Ef,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPR,EADO,KACAS,EADA,OAEkBD,oBAAS,GAF3B,mBAEPE,EAFO,KAEGC,EAFH,OAGkBH,mBAAS,IAH3B,mBAGPI,EAHO,KAGGC,EAHH,KAKRC,EAAY,uCAAG,4BAAAC,EAAA,6DACpBJ,GAAY,GACA,+CAFQ,SAGGK,MADX,+CACsB,CAAEC,YAAa,gBAC/CC,MAAK,SAACC,GAEN,OAAOA,EAAIC,UAEXC,OAAM,SAACC,GAEPT,EAAYS,MAVM,cAGhBC,EAHgB,OAYpBC,YAAW,WACVb,GAAY,GACRY,GAEHd,EAASc,EAAK,MAEb,KAlBiB,kBAmBbA,GAnBa,2CAAH,qDA0BlB,OAJAE,qBAAU,WACTX,MACE,IAGF,yBAAKb,UAAU,kBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,wBACd,yBAAKC,IAAKwB,IAAMzB,UAAU,kBAAkBE,IAAI,OAAOC,MAAM,SAE1D,yBAAKH,UAAU,wBACb,2BAAOA,UAAU,+BAA8B,+CAGtD,yBAAKA,UAAU,OACbW,EACA,yBAAKX,UAAU,iDACd,yBAAKA,UAAU,qBAAqB0B,KAAK,SACtCf,IAGD,KAEJ,yBAAKX,UAAU,yEACbS,EAAW,kBAAC,EAAD,MAAc,kBAAC,EAAD,CAAOV,MAAOA,MAG1C,yBAAKC,UAAU,YACd,yBAAKA,UAAU,wBACd,4BACC2B,KAAK,SACL3B,UAAU,iCACV4B,QAASf,GAHV,qBASC,6BACA,yBAAKb,UAAU,OACb,yBAAKA,UAAU,gEACb,2BAAOA,UAAU,aAAjB,YAAsC,uBAAG6B,KAAK,+BAAR,iBACtC,2BAAO7B,UAAU,aAAjB,WAAqC,uBAAG6B,KAAK,wCAAR,qBC/D3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41e74fa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0efe94db.svg\";","import React, { Fragment } from 'react'\nimport './Frase.css'\n\nconst Frase = ({ frase }) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className='col-12'>\n\t\t\t\t<h4 className='quote'>{frase['quote']}</h4>\n\t\t\t</div>\n\t\t\t<div className='col-12 d-flex justify-content-start align-items-end'>\n\t\t\t\t<img\n\t\t\t\t\tsrc={frase['image']}\n\t\t\t\t\tclassName='img-fluid img-thumbnail mr-3'\n\t\t\t\t\talt='imagen personaje'\n\t\t\t\t\twidth='50px'\n\t\t\t\t\theight='50px'\n\t\t\t\t/>\n\t\t\t\t<blockquote className='personaje'>{frase['character']}</blockquote>\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nexport default Frase\n","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner my-4\">\n      <div className=\"bounce1\"></div>\n      <div className=\"bounce2\"></div>\n      <div className=\"bounce3\"></div>\n    </div>\n  );\n};\n\nexport default Spinner;","import React, { useState, useEffect } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Frase from './components/Frase'\nimport Spinner from './components/Spinner'\n\nfunction App() {\n\tconst [frase, setFrase] = useState({})\n\tconst [cargando, setCargando] = useState(false)\n\tconst [msgError, setMsgError] = useState('')\n\n\tconst obtenerFrase = async () => {\n\t\tsetCargando(true)\n\t\tconst url = 'https://thesimpsonsquoteapi.glitch.me/quotes'\n\t\tlet data = await await fetch(url, { credentials: 'same-origin' })\n\t\t\t.then((res) => {\n\t\t\t\t// console.log('res', res)\n\t\t\t\treturn res.json()\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\t// console.log('Error:', err)\n\t\t\t\tsetMsgError(err)\n\t\t\t})\n\t\tsetTimeout(() => {\n\t\t\tsetCargando(false)\n\t\t\tif (data) {\n\t\t\t\t// console.log('data', data)\n\t\t\t\tsetFrase(data[0])\n\t\t\t}\n\t\t}, 500)\n\t\treturn data\n\t}\n\n\tuseEffect(() => {\n\t\tobtenerFrase()\n\t}, [])\n\n\treturn (\n\t\t<div className='container my-3'>\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-lg-6 offset-lg-3'>\n\t\t\t\t\t<img src={logo} className='mx-auto d-block' alt='logo' width='80%' />\n        </div>\n        <div className='col-lg-6 offset-lg-3'>\n          <small className=\"text-center d-block mx-auto\"><b>Random Quotes</b></small>\n        </div>\n\t\t\t</div>\n\t\t\t<div className='row'>\n\t\t\t\t{msgError ? (\n\t\t\t\t\t<div className='col-10 offset-1 col-lg-8 offset-lg-2 my-5 p-5'>\n\t\t\t\t\t\t<div className='alert alert-danger' role='alert'>\n\t\t\t\t\t\t\t{ msgError }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\n\t\t\t\t<div className='col-10 offset-1 col-lg-8 offset-lg-2 my-5 p-3 bg-white rounded shadow'>\n\t\t\t\t\t{cargando ? <Spinner /> : <Frase frase={frase} />}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='row mb-5'>\n\t\t\t\t<div className='col-lg-6 offset-lg-3'>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\tclassName='btn btn-danger d-block mx-auto'\n\t\t\t\t\t\tonClick={obtenerFrase}\n\t\t\t\t\t>\n\t\t\t\t\t\tShow me another\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n      </div>\n      <hr/>\n      <div className='row'>\n        <div className='col-lg-6 offset-lg-3 d-flex flex-row justify-content-between'>\n          <small className=\"text-dark\">Code by: <a href=\"https://github.com/jleon253\">John Le√≥n</a></small>\n          <small className=\"text-dark\">API by: <a href=\"https://jluboff-portfolio.glitch.me/\">Jason Luboff</a></small>\n        </div>\n      </div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}